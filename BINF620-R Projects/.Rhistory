ggplot(missing_info, aes(x = reorder(Variables, -Missing), y = PercentMissing)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Percent Missing Values in Each Variable",
x = "Variables",
y = "Percent of Missing Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
aggr(p2Data, col = c('navyblue', 'red'), numbers = FALSE, sortVars = TRUE,
labels = names(data), cex.axis = 0.7, gap = 3, ylab = c("Missing Data", "Pattern"))
# Create a summary of missing values
missing_info <- data.frame(Variables = names(p2Data),
Missing = colSums(is.na(p2Data)),
PercentMissing = colSums(is.na(p2Data)) / nrow(p2Data) * 100)
# Create a bar plot of missing values
ggplot(missing_info, aes(x = reorder(Variables, -Missing), y = PercentMissing)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Percent Missing Values in Each Variable (%)",
x = "Variables",
y = "Percent of Missing Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a summary of missing values
missing_info <- data.frame(Variables = names(p2Data),
Missing = colSums(is.na(p2Data)),
PercentMissing = colSums(is.na(p2Data)) / nrow(p2Data) * 100)
# Create a bar plot of missing values
ggplot(missing_info, aes(x = reorder(Variables, -Missing), y = PercentMissing)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Percent Missing Values in Each Variable (%)",
x = "Variables",
y = "Percent of Missing Values") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate and visualize the correlation matrix
cor_matrix <- cor(p2_complete %>% select_if(is.numeric), use = "complete.obs")  # selecting numeric vars only
p2_imputed <- mice(p2Data, m=5, method = 'pmm' ,maxit=5)
p2_complete <- complete(p2_imputed, 1)
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_classic()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
after_stat(count) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
after_stat(count) +
#geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
#after_stat(count) +
geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
ggplot(p2_complete, aes(x = as.factor(MH_PPDPR))) +
geom_bar(fill = "skyblue") +
#after_stat(count) +
geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
labs(x = "MH_PPDPR", y = "Frequency", title = "Depress Since Birth Frequency") +
theme_minimal()
View(p2Data)
# Calculate and visualize the correlation matrix
cor_matrix <- cor(p2_complete %>% select_if(is.numeric), use = "complete.obs")  # selecting numeric vars only
# Visualize correlation matrix
ggcorrplot(cor_matrix, method = "circle", type = "lower", lab = TRUE, title = "Correlation Matrix")
caret::featurePlot(x = p2_complete[, c("PGWT_GN", "MOM_CM", "MOM_BMI", "MOMCIG", "CIG_PRIOR", "MOM_LBKG", "DDS_INS")],
y = as.factor(p2_complete$MH_PPDPR),
plot = "density")
# Filter Data
filtered_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
p2_complete$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
filtered_p2Data$Event <- ifelse(filtered_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
View(p2_complete)
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
# Scenario 2
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
ggplot(p2_complete, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed, 1 = Experienced Depression", y = "Frequency", title = "Imputed - Depress Since Birth Frequency") +
theme_minimal()
ggplot(scen1_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed, 1 = Experienced Depression", y = "Frequency", title = "Filtered Imputed - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
sP1 <- ggplot(scen1_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed, 1 = Experienced Depression", y = "Frequency", title = "Scenario #1 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
sP1 <- ggplot(scen1_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed, 1 = Experienced Depression", y = "Frequency", title = "Scenario #1 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
sP1
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
sP1 <- ggplot(scen1_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (4,5), 1 = Experienced Depression (1,2)", y = "Frequency", title = "Scenario #1 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
sP2 <- ggplot(scen2_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (4,5), 1 = Experienced Depression (1,2,3)", y = "Frequency", title = "Scenario #2 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
sP3 <- ggplot(scen3_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (5), 1 = Experienced Depression (1) ", y = "Frequency", title = "Scenario #3 - Depress Since Birth Frequency") +
theme_minimal()
grid.arrange(sP1, sP2, sP3, ncol = 2, nrow = 2)
# Scenario 1
scen1_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,2,4,5))
scen1_p2Data$Event <- ifelse(scen1_p2Data$MH_PPDPR %in% c(1, 2), 1, 0)
sP1 <- ggplot(scen1_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (4,5), 1 = Experienced Depression (1,2)", y = "Frequency", title = "Scenario #1 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 2
scen2_p2Data <- p2_complete
scen2_p2Data$Event <- ifelse(p2_complete$MH_PPDPR %in% c(1, 2, 3), 1, 0)
sP2 <- ggplot(scen2_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (4,5), 1 = Experienced Depression (1,2,3)", y = "Frequency", title = "Scenario #2 - Depress Since Birth Frequency") +
theme_minimal()
# Scenario 3
scen3_p2Data <- p2_complete %>%
filter(MH_PPDPR %in% c(1,5))
scen3_p2Data$Event <- ifelse(scen3_p2Data$MH_PPDPR %in% 1, 1, 0)
sP3 <- ggplot(scen3_p2Data, aes(x = as.factor(Event))) +
geom_bar(fill = "skyblue") +
labs(x = "MH_PPDPR (0 = Minimally Depressed (5), 1 = Experienced Depression (1) ", y = "Frequency", title = "Scenario #3 - Depress Since Birth Frequency") +
theme_minimal()
grid.arrange(sP1, sP2, sP3, ncol = 1, nrow = 3)
# Factor Variable
scen1_p2Data$Event <- as.factor(scen1_p2Data$Event)
trainIndex <- createDataPartition(scen1_p2Data$Event, p = 0.8, list = FALSE)
spec1_trainData <- p2_complete[trainIndex, ]
spec1_testData <- p2_complete[-trainIndex, ]
spec1_trainData$Event <- as.factor(spec1_trainData$Event)
# Factor Variable
scen1_p2Data$Event <- as.factor(scen1_p2Data$Event)
trainIndex <- createDataPartition(scen1_p2Data$Event, p = 0.8, list = FALSE)
spec1_trainData <- scen1_p2Data[trainIndex, ]
spec1_testData <- scen1_p2Data[-trainIndex, ]
spec1_trainData$Event <- as.factor(spec1_trainData$Event)
# Factor Variable
scen2_p2Data$Event <- as.factor(scen2_p2Data$Event)
trainIndex <- createDataPartition(scen1_p2Data$Event, p = 0.8, list = FALSE)
spec2_trainData <- scen2_p2Data[trainIndex, ]
spec2_testData <- scen2_p2Data[-trainIndex, ]
spec2_trainData$Event <- as.factor(spec2_trainData$Event)
# Factor Variable
scen1_p2Data$Event <- as.factor(scen1_p2Data$Event)
trainIndex <- createDataPartition(scen1_p2Data$Event, p = 0.8, list = FALSE)
spec1_trainData <- scen1_p2Data[trainIndex, ]
spec1_testData <- scen1_p2Data[-trainIndex, ]
spec1_trainData$Event <- as.factor(spec1_trainData$Event)
# Factor Variable
scen2_p2Data$Event <- as.factor(scen2_p2Data$Event)
trainIndex <- createDataPartition(scen2_p2Data$Event, p = 0.8, list = FALSE)
spec2_trainData <- scen2_p2Data[trainIndex, ]
spec2_testData <- scen2_p2Data[-trainIndex, ]
spec2_trainData$Event <- as.factor(spec2_trainData$Event)
# Factor Variable
scen3_p2Data$Event <- as.factor(scen3_p2Data$Event)
trainIndex <- createDataPartition(scen3_p2Data$Event, p = 0.8, list = FALSE)
spec3_trainData <- scen3_p2Data[trainIndex, ]
spec3_testData <- scen3_p2Data[-trainIndex, ]
spec3_trainData$Event <- as.factor(spec3_trainData$Event)
# Spec 1
logit_spec1 <- train(Event ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS,
data = spec1_trainData, method = "glm", family = binomial)
logit_spec1
# Spec 2
logit_spec2 <- train(Event ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS,
data = spec2_trainData, method = "glm", family = binomial)
logit_spec2
# Spec 3
logit_spec3 <- train(Event ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS,
data = spec3_trainData, method = "glm", family = binomial)
logit_spec3
# Spec 1
spec1_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec1_trainData)
summary(spec1_naive)
# Spec 2
spec2_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
summary(spec2_naive)
# lda
spec1_lda = lda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec1_trainData)
spec1_lda
spec2_lda = lda(as.factor(MH_PPDPR) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_lda
spec2_event_lda = lda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_event_lda
# qda
spec1_qda = qda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec1_trainData)
spec1_qda
spec2_qda = qda(as.factor(MH_PPDPR) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_qda
spec2_event_qda = qda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_event_qda
# lda
spec1_lda = lda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec1_trainData)
spec1_lda
spec2_lda = lda(as.factor(MH_PPDPR) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_lda
spec2_event_lda = lda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_event_lda
# qda
spec1_qda = qda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec1_trainData)
spec1_qda
spec2_qda = qda(as.factor(MH_PPDPR) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_qda
spec2_event_qda = qda(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOMCIG + CIG_PRIOR + MOM_LBKG + DDS_INS, data = spec2_trainData)
spec2_event_qda
# Predict
data_trn_pred <- predict(spec1_lda, spec1_trainData)
data_tst_pred <- predict(spec1_lda, spec1_trainData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec1_trainData$Event)
# Check accuracy on the test set
accuracy_tst <- mean(predictions_tst == spec1_testData$Event)
# Create confusion matrices
conf_matrix_trn <- table(predictions_trn, spec1_trainData$Event)
conf_matrix_tst <- table(predictions_tst, spec1_testData$Event)
# Predict
data_trn_pred <- predict(spec1_lda, spec1_trainData)
data_tst_pred <- predict(spec1_lda, spec1_testData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec1_trainData$Event)
# Check accuracy on the test set
accuracy_tst <- mean(predictions_tst == spec1_testData$Event)
# Create confusion matrices
conf_matrix_trn <- table(predictions_trn, spec1_trainData$Event)
conf_matrix_tst <- table(predictions_tst, spec1_testData$Event)
# Output results
accuracy_trn
accuracy_tst
kable(conf_matrix_trn, caption = "Coefficient Matrix of Train | LDA", format = "html")
kable(conf_matrix_tst, caption = "Coefficient Matrix of Test  | LDA", format = "html")
# Predict
data_trn_pred <- predict(spec2_lda, spec2_trainData)
data_tst_pred <- predict(spec2_lda, spec2_testData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec2_trainData$Event)
# Predict
data_trn_pred <- predict(spec2_event_lda, spec2_trainData)
data_tst_pred <- predict(spec2_event_lda, spec2_testData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec2_trainData$Event)
# Check accuracy on the test set
accuracy_tst <- mean(predictions_tst == spec2_testData$Event)
# Create confusion matrices
conf_matrix_trn <- table(predictions_trn, spec2_trainData$Event)
conf_matrix_tst <- table(predictions_tst, spec2_testData$Event)
# Output results
accuracy_trn
accuracy_tst
kable(conf_matrix_trn, caption = "Coefficient Matrix of Train | LDA", format = "html")
kable(conf_matrix_tst, caption = "Coefficient Matrix of Test  | LDA", format = "html")
# Spec 1
spec1_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG + DDS_INS, data = spec1_trainData)
summary(spec1_naive)
# Spec 2
spec2_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG + DDS_INS, data = spec2_trainData)
summary(spec2_naive)
# Spec 1
spec1_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG, data = spec1_trainData)
summary(spec1_naive)
# Spec 2
spec2_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG, data = spec2_trainData)
summary(spec2_naive)
# Spec 1
spec1_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG + ALIVE, data = spec1_trainData)
summary(spec1_naive)
# Spec 2
spec2_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN + MOM_CM + MOM_BMI + MOM_LBKG + ALIVE, data = spec2_trainData)
summary(spec2_naive)
# Spec 1
spec1_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN, data = spec1_trainData)
summary(spec1_naive)
# Spec 2
spec2_naive <- naive_bayes(as.factor(Event) ~ PGWT_GN, data = spec2_trainData)
summary(spec2_naive)
write.csv(p2_complete, "p2Imputed_complete.csv")
p2_complete <- read.csv("p2Imputed_complete.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(survival)
library(ranger)
library(ggplot2)
library(ggfortify)
library("survminer")
library(gridExtra)
library(caret)
library(knitr)
library(kable)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(survival)
library(ranger)
library(ggplot2)
library(ggfortify)
library("survminer")
library(gridExtra)
library(caret)
library(knitr)
library(kableExtra)
library(corrplot)
library(ggcorrplot)
library(mice)
library(tidyr)
library(VIM)
library(naivebayes)
library(MASS)
set.seed(15)
# Predict
data_trn_pred <- predict(spec1_lda, spec1_trainData)
data_tst_pred <- predict(spec1_lda, spec1_testData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec1_trainData$Event)
# Check accuracy on the test set
accuracy_tst <- mean(predictions_tst == spec1_testData$Event)
# Create confusion matrices
conf_matrix_trn <- table(predictions_trn, spec1_trainData$Event)
conf_matrix_tst <- table(predictions_tst, spec1_testData$Event)
# Output results
accuracy_trn
accuracy_tst
kable(conf_matrix_trn, caption = "Coefficient Matrix of Train | LDA", format = "html")
kable(conf_matrix_tst, caption = "Coefficient Matrix of Test  | LDA", format = "html")
# Predict
data_trn_pred <- predict(spec2_event_lda, spec2_trainData)
data_tst_pred <- predict(spec2_event_lda, spec2_testData)
# Store Predictions
predictions_trn <- data_trn_pred$class
predictions_tst <- data_tst_pred$class
# Calculate classification error
calc_class_err <- function(actual, predicted) {
mean(actual != predicted)
}
# Check accuracy on the training set
accuracy_trn <- mean(predictions_trn == spec2_trainData$Event)
# Check accuracy on the test set
accuracy_tst <- mean(predictions_tst == spec2_testData$Event)
# Create confusion matrices
conf_matrix_trn <- table(predictions_trn, spec2_trainData$Event)
conf_matrix_tst <- table(predictions_tst, spec2_testData$Event)
# Output results
accuracy_trn
accuracy_tst
kable(conf_matrix_trn, caption = "Coefficient Matrix of Train | LDA", format = "html")
kable(conf_matrix_tst, caption = "Coefficient Matrix of Test  | LDA", format = "html")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(survival)
library(ranger)
library(ggplot2)
library(ggfortify)
library("survminer")
library(gridExtra)
library(caret)
library(knitr)
library(kableExtra)
library(corrplot)
library(ggcorrplot)
library(mice)
library(class)
library(tidyr)
library(VIM)
library(naivebayes)
library(MASS)
set.seed(15)
predictors_train <- as.matrix(spec1_trainData[, -ncol(spec1_trainData)])  # assuming the target is the last column
predictors_test <- as.matrix(spec1_testData[, -ncol(spec1_testData)])
target_train <- spec1_trainData[, ncol(spec1_trainData)]  # target variable in the training set
target_test <- spec1_testData[, ncol(spec1_testData)]     # target variable in the testing set
predicted_test <- knn(train = predictors_train, test = predictors_test, cl = target_train, k = 5)
predictors_train <- as.matrix(spec1_trainData[, -ncol(spec1_trainData)])
predictors_test <- as.matrix(spec1_testData[, -ncol(spec1_testData)])
target_train <- spec1_trainData[, ncol(spec1_trainData)]
target_test <- spec1_testData[, ncol(spec1_testData)]
predicted_test <- knn(train = predictors_train, test = predictors_test, cl = target_train, k = 5)
View(spec1_trainData)
spec1_trainData <- spec1_trainData[, !colnames(spec1_trainData) %in% "ID"]
spec1_testData <- spec1_testData[, !colnames(spec1_testData) %in% "ID"]
predictors_train <- as.matrix(spec1_trainData[, -ncol(spec1_trainData)])
predictors_test <- as.matrix(spec1_testData[, -ncol(spec1_testData)])
target_train <- spec1_trainData[, ncol(spec1_trainData)]
target_test <- spec1_testData[, ncol(spec1_testData)]
predicted_test <- knn(train = predictors_train, test = predictors_test, cl = target_train, k = 5)
accuracy <- sum(predicted_test == target_test) / length(target_test)
predicted_test
trainData <- spec2_trainData[, !colnames(spec2_trainData) %in% "ID"]
testData <- spec2_testData[, !colnames(spec2_testData) %in% "ID"]
predictors_train <- as.matrix(trainData[, -ncol(trainData)])
predictors_test <- as.matrix(testData[, -ncol(testData)])
target_train <- trainData[, ncol(trainData)]
target_test <- testData[, ncol(testData)]
predicted_test <- knn(train = predictors_train, test = predictors_test, cl = target_train, k = 5)
accuracy <- sum(predicted_test == target_test) / length(target_test)
predicted_test
